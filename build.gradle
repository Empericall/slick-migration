/**
 * Сборка библиотеки миграций.
 */
buildscript {
    repositories {
        maven {
            url 'http://a1artifactory.vrn.mail.msk/artifactory/a1'
            credentials {
                username = "${artifactory_user}"
                password = "${artifactory_password}"
            }
        }
        maven {
            url 'http://a1artifactory.vrn.mail.msk/artifactory/maven-proxy-releases'
        }
        //jcenter() //this works with Gradle 1.7
        // maven { url 'http://jcenter.bintray.com' } this works with Gradle 1.6

    }
    dependencies {
//        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:3.1.0"
        classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:2.2.4'
        classpath 'info.solidsoft.gradle.pitest:gradle-pitest-plugin:0.32.0'
        classpath 'org.pitest:pitest:0.32'

        classpath 'com.typesafe.slick:slick-codegen_2.11:3.0.3' //slickCodeGen

        classpath 'org.scala-lang:scala-compiler:2.11.7'
        classpath 'org.scala-lang:scala-reflect:2.11.7'
        classpath 'org.postgresql:postgresql:9.4-1206-jdbc42'

        /** Плагин для запуска ScalaTest тестов.*/
        classpath 'com.github.maiflai:gradle-scalatest:0.10' // http://plugins.gradle.org/plugin/com.github.maiflai.scalatest
    }
}


ext {
    aGroup = 'ru.mail'

    scalaMajorVersion = '2.11'
    scalaFullVersion = "${scalaMajorVersion}.7"
    akkaVersion = '2.3.12'
    slf4j = "org.slf4j:slf4j-api:1.7.7"
    logback = 'ch.qos.logback:logback-classic:1.1.1'
    slick = "com.typesafe.slick:slick_${scalaMajorVersion}:3.0.3"
    slickCodeGen = "com.typesafe.slick:slick-codegen_${scalaMajorVersion}:3.0.3"

    nscalaTime = "com.github.nscala-time:nscala-time_${scalaMajorVersion}:1.0.0"

    scalaTest = "org.scalatest:scalatest_${scalaMajorVersion}:2.1.6"
    jUnit = "junit:junit:4.11"

    scalaLib = ["org.scala-lang:scala-library:${scalaFullVersion}",
                "org.scala-lang.modules:scala-parser-combinators_${scalaMajorVersion}:1.0.2"]
    scalaCompiler = "org.scala-lang:scala-compiler:${scalaFullVersion}"
    scalaReflect = "org.scala-lang:scala-reflect:${scalaFullVersion}"

    postgres = 'org.postgresql:postgresql:9.3-1101-jdbc41' //"org.postgresql:postgresql:9.2-1004-jdbc41"

    shapeless = "com.chuusai:shapeless_${scalaMajorVersion}:2.2.5"

    synapseGridAkka = "ru.primetalk:synapse-grid-akka_${scalaMajorVersion}:1.4.4"
//    synapseFrames = "ru.primetalk:synapse-frames_${scalaMajorVersion}:1.3.5"

    pickling = "org.scala-lang:scala-pickling_${scalaMajorVersion}:0.9.0"

    boneCP = 'com.jolbox:bonecp:0.8.0.RELEASE'

    rootProjectDir = "$projectDir"

    slickPg = "com.github.tminglei:slick-pg_${scalaMajorVersion}:0.9.0"
//    artifactory_contextUrl = 'http://s1-artifactory.mail.msk/artifactory'

    artifactory_repositoryUrl = "${artifactory_contextUrl}/a1-local"
    jmxtools = 'com.sun.jdmk:jmxtools:1.2.1'
    kafka = "org.apache.kafka:kafka_${scalaMajorVersion}:0.8.1.1"

    scopt = "com.github.scopt:scopt_${scalaMajorVersion}:3.3.0"

    serverBin = "$rootProjectDir/../../../server_bin"

    devEnv = "$rootProjectDir/devenv/server_bin1"

    pegdown = 'org.pegdown:pegdown:1.4.2'
}

allprojects {
    apply plugin: 'artifactory' // it is necessary for the subsequent method "artifactory"
//    apply plugin: 'com.jfrog.artifactory' // it is necessary for the subsequent method "artifactory"
}

artifactoryPublish.skip = false // отключить publish для корневого проекта

artifactory {  //see http://www.jfrog.com/confluence/display/RTF/Working+with+Gradle?showChildren=false#
    contextUrl = artifactory_contextUrl   //The base Artifactory URL if not overridden by the publisher/resolver
    publish {
        repository {
            repoKey = 'a1-local'
            username = artifactory_user
            password = artifactory_password
            maven = true
        }
//        defaults {
//            publications ('mavenJava')
//            properties {
//                mavenJava 'group:'
//            }
//        }
    }
    resolve {
        repository {
            repoKey = 'a1'
            username = artifactory_user
            password = artifactory_password
            maven = true
        }
    }
}
repositories {
    maven {
        url artifactory_repositoryUrl
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.10'
}

allprojects {
    apply plugin: 'idea'
    apply plugin: 'artifactory-publish'
//    apply plugin: 'jacoco'
    tasks.withType(Test) {
        systemProperty("test.database.url", System.getProperty("test.database.url"))
        systemProperty("test.database.login", System.getProperty("test.database.login"))
        systemProperty("test.database.password", System.getProperty("test.database.password"))
    }
}

allprojects {
    apply plugin: 'maven'
    apply plugin: 'java'
    apply plugin: 'scala'
    apply plugin: 'idea'
    apply plugin: 'artifactory-publish'
//    apply plugin: 'maven-publish'
//    apply plugin: 'com.jfrog.artifactory' // it is necessary for the subsequent method "artifactory"

    group = aGroup

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    compileJava.options.encoding = 'UTF-8'

    archivesBaseName = "${project.name}_${scalaMajorVersion}"

    dependencies {
        compile scalaLib
        // The following is necessary for Idea
//        compile scalaCompiler
//        compile scalaReflect
        testRuntime logback
        testRuntime pegdown // is required for scalatest-gradle-plugin (com.github.maiflai:gradle-scalatest)
    }
    // Копируем все зависимости, которые нужны в runtime'е в папку lib в корне проекта
    task copyDeps(type: Copy) {
        from configurations.runtime
        into "$rootProjectDir/lib"
    }

    // Создаём jar-файл с суффиксом -sources из всех исходников проекта.
    task sourceJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
    // добавляем к артефактам jar с исходниками
    artifacts {
        archives sourceJar
    }

    tasks.withType(ScalaCompile) {
        scalaCompileOptions.useAnt = false
        scalaCompileOptions.useCompileDaemon = true
        // optionally specify host and port of the daemon:
        scalaCompileOptions.daemonServer = "localhost:4243"
        scalaCompileOptions.additionalParameters = ["-feature"]
    }

    repositories {
        flatDir {
            name "jarsRepo"
            dirs "$rootProjectDir/jars"
        }
        flatDir {
            name "allodsScalaRepo"
            dirs "$rootProjectDir/../../server/vendor/allods-scala"
        }

    }
//    project.pom.artifactId "${project.name}_${scalaMajorVersion}"
    // публикуем jar-файлы в указанную папку-репозиторий.
    uploadArchives {
        repositories {
            add project.repositories.jarsRepo
            add project.repositories.allodsScalaRepo
        }
    }

//    publishing {
//        publications {
//            mavenJava(MavenPublication) {
//                artifact sourceJar
////                artifacts {
////                    compile jar
////                }
//                artifactId "${project.name}_${scalaMajorVersion}"
//                version project.version
//            }
//        }
//    }

//    artifactoryPublish {
////        publications ('mavenJava')
////        publishArtifacts = true
//    }
}

version = '3.0.3'
description = 'slick-migration - an open source library to support database schema migrations.'
dependencies {
    compile slick
    compile postgres
    compile slf4j
    runtime logback

    testCompile jUnit
    testCompile scalaTest

    compile nscalaTime
    compile shapeless

    testRuntime logback
}

artifacts {
    archives jar
    archives sourceJar
}
